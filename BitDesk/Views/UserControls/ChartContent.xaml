<UserControl
    x:Class="BitDesk.Views.UserControls.ChartContent"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:model="using:BitApps.Core.Models"
    xmlns:localmodel="using:BitDesk.Models"
    xmlns:lvc="using:LiveChartsCore.SkiaSharpView.WinUI"
    xmlns:controls="using:CommunityToolkit.WinUI.Controls"
    xmlns:ui="using:CommunityToolkit.WinUI"
    xmlns:animations="using:CommunityToolkit.WinUI.Animations"
    xmlns:triggers="using:CommunityToolkit.WinUI"
    mc:Ignorable="d">
    <UserControl.Resources>
        <ResourceDictionary>
            
            <DataTemplate x:Key="LtpTemplate" x:DataType="model:Depth">
                <Grid Margin="0" HorizontalAlignment="Stretch">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="80" />
                        <ColumnDefinition Width="90" />
                        <ColumnDefinition Width="80" />
                    </Grid.ColumnDefinitions>

                    <TextBlock Grid.Column="0" x:Name="DepthAskBest" Margin="0" Padding="0 0 0 0">

                    </TextBlock>
                    <TextBlock Grid.Column="1" x:Name="DepthPrice" FontWeight="ExtraBold" FontSize="13" Opacity="0.8" Foreground="{ThemeResource LtpColorBrush}" Text="{x:Bind Path=DepthPriceFormatted, Mode=OneWay}" Margin="0 0 3 0" Padding="3 1 3 1" HorizontalAlignment="Right">
                        <TextBlock.Style>
                            <Style TargetType="TextBlock" BasedOn="{StaticResource CaptionTextBlockStyle}">
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                    <TextBlock Grid.Column="2" x:Name="DepthBidBest" Margin="0" Padding="0 0 0 0">

                    </TextBlock>
                </Grid>
            </DataTemplate>

            <DataTemplate x:Key="BidOrAskTemplate" x:DataType="model:Depth">
                <Grid Margin="0" HorizontalAlignment="Stretch">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="80" />
                        <ColumnDefinition Width="90" />
                        <ColumnDefinition Width="80" />
                    </Grid.ColumnDefinitions>

                    <TextBlock Grid.Column="0" x:Name="DepthAskBest" Text="{x:Bind Path=DepthAskFormatted, Mode=OneWay}" Foreground="{ThemeResource PriceDownColorBrush}" Margin="0" Padding="0 0 0 0" HorizontalAlignment="Right">
                        <TextBlock.Style>
                            <Style TargetType="TextBlock" BasedOn="{StaticResource CaptionTextBlockStyle}">
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                    <TextBlock Grid.Column="1" x:Name="DepthPrice" Text="{x:Bind Path=DepthPriceFormatted, Mode=OneWay}" Margin="3 0 3 0" Padding="3 0 3 0" HorizontalAlignment="Right">
                        <TextBlock.Style>
                            <Style TargetType="TextBlock" BasedOn="{StaticResource CaptionTextBlockStyle}">
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                    <TextBlock Grid.Column="2" x:Name="DepthBidBest" Text="{x:Bind Path=DepthBidFormatted, Mode=OneWay}" Foreground="{ThemeResource PriceUpColorBrush}" Margin="0" Padding="0 0 0 0" HorizontalAlignment="Right">
                        <TextBlock.Style>
                            <Style TargetType="TextBlock" BasedOn="{StaticResource CaptionTextBlockStyle}">
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                </Grid>
            </DataTemplate>

            <model:DepthListItemTemplateSelector x:Key="DepthListItemTemplateSelector" LtpTemplate="{StaticResource LtpTemplate}" BidOrAskTemplate="{StaticResource BidOrAskTemplate}" />

            <Style x:Key="PrivatePanelStyle" TargetType="StackPanel">
                <Setter Property="CornerRadius" Value="3" />
                <Setter Property="Padding" Value="0" />
                <Setter Property="Background" Value="{ThemeResource CardBackgroundFillColorDefaultBrush}" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="BorderBrush" Value="{ThemeResource CardStrokeColorDefaultBrush}" />
                <Setter Property="Orientation" Value="Horizontal" />
                <Setter Property="Spacing" Value="0" />
                <Setter Property="animations:Implicit.HideAnimations" Value="{StaticResource ShowTransitions}" />
            </Style>

            <animations:ImplicitAnimationSet x:Name="ShowTransitions">
                <animations:OffsetAnimation EasingMode="EaseOut"
                                        From="0,24,0"
                                        To="0"
                                        Duration="0:0:0.4" />
                <animations:OpacityAnimation EasingMode="EaseOut"
                                         From="0"
                                         To="1"
                                         Duration="0:0:0.2" />
            </animations:ImplicitAnimationSet>
            <animations:ImplicitAnimationSet x:Name="HideTransitions">
                <animations:OffsetAnimation EasingMode="EaseOut"
                                        From="0"
                                        To="0,24,0"
                                        Duration="0:0:0.2" />
                <animations:OpacityAnimation EasingMode="EaseOut"
                                         From="1"
                                         To="0"
                                         Duration="0:0:0.1" />
            </animations:ImplicitAnimationSet>

            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="ms-appx:///CommunityToolkit.WinUI.Controls.Segmented/Segmented/Segmented.xaml" />
            </ResourceDictionary.MergedDictionaries>

        </ResourceDictionary>
    </UserControl.Resources>
    
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="6*" MinHeight="100"/>
            <RowDefinition Height="4*"/>
        </Grid.RowDefinitions>
        
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup>
                <VisualState>
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="650" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="SecondaryTitle.Margin" Value="0"/>
                    </VisualState.Setters>
                </VisualState>
                <VisualState>
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="0" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="SecondaryTitle.Margin" Value="12,0,0,0"/>
                        <Setter Target="SplitViewControl.IsPaneOpen" Value="False"/>
                        <Setter Target="PanelOpenClose.Visibility" Value="Collapsed"/>
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
            <VisualStateGroup>
                <VisualState x:Name="test">
                    <VisualState.StateTriggers>
                        <StateTrigger IsActive="{x:Bind Path=PairViewModel.IsPaneVisible, Mode=TwoWay}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="PanelOpenClose.Icon" Value="ClosePane" />
                        <Setter Target="PanelOpenClose.Label" Value="hide" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>

<!--
            <VisualStateGroup>
                <VisualState x:Name="Equal">
                    <VisualState.StateTriggers>
                        <triggers:CompareStateTrigger Comparison="Equal" Value="buy" To="buy" />
                        <triggers:CompareStateTrigger Comparison="Equal" Value="{Binding Tag, ElementName=TextBlockTest, Mode=OneWay}" To="buy" />
                    </VisualState.StateTriggers>

                    <VisualState.Setters>
                        <Setter Target="TextBlockTest.Foreground" Value="Red" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
-->


        </VisualStateManager.VisualStateGroups>

        <!-- Main SplitView -->
        <SplitView x:Name="SplitViewControl" Grid.Row="0" Grid.Column="0" Margin="0" BorderThickness="1,0,0,1" BorderBrush="{ThemeResource NavigationViewContentGridBorderBrush}" PaneBackground="Transparent" IsPaneOpen="{x:Bind Path=PairViewModel.IsPaneVisible, Mode=TwoWay}" PanePlacement="Right" OpenPaneLength="280" CompactPaneLength="0" DisplayMode="CompactInline">

            <!-- OrderBook(Depth) and Transactions -->
            <SplitView.Pane>
                <Grid Margin="6,6,0,0">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="0"/>
                    </Grid.RowDefinitions>

                    <Grid Grid.Row="0">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>

                        <controls:Segmented Grid.Row="0" x:Name="SegmentedControlSide"
                            HorizontalAlignment="Stretch"
                            SelectedIndex="0" Margin="8">
                            <controls:SegmentedItem x:Uid="TabHeader_OrderBook"
                                    Tag="square" />
                            <controls:SegmentedItem x:Uid="TabHeader_Transactions"
                                    Tag="circle" />
                        </controls:Segmented>
                        <controls:SwitchPresenter Grid.Row="1" Value="{Binding SelectedItem.Tag, ElementName=SegmentedControlSide}">
                            <controls:Case Value="square">
                                <ListBox x:Name="DepthListBox" animations:Implicit.HideAnimations="{StaticResource HideTransitions}" animations:Implicit.ShowAnimations="{StaticResource ShowTransitions}" BorderThickness="0,0,0,0" BorderBrush="{ThemeResource NavigationViewContentGridBorderBrush}" ItemTemplateSelector="{StaticResource DepthListItemTemplateSelector}" ItemsSource="{x:Bind Path=PairViewModel.Depth, Mode=OneWay}" SizeChanged="ListBoxDepth_SizeChanged" IsDoubleTapEnabled="True" DoubleTapped="DepthListBox_DoubleTapped" Background="Transparent" Margin="0,0,0,0" Padding="0,12,0,12" HorizontalAlignment="Stretch" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Auto">
                                    <!--  VerticalAlignment="Stretch" removed so that SizeChagen gets invoked. -->
                                    <ListBox.ItemContainerStyle>
                                        <Style TargetType="ListBoxItem" BasedOn="{StaticResource DefaultListBoxItemStyle}">
                                            <Setter Property="Padding" Value="3,3,3,3"/>
                                            <Setter Property="Height" Value="25"/>
                                            <Setter Property="IsEnabled" Value="False" />
                                            <Setter Property="HorizontalAlignment" Value="Stretch" />
                                        </Style>
                                    </ListBox.ItemContainerStyle>
                                </ListBox>
                            </controls:Case>
                            <controls:Case Value="circle">
                                <ListBox animations:Implicit.HideAnimations="{StaticResource HideTransitions}" animations:Implicit.ShowAnimations="{StaticResource ShowTransitions}" BorderThickness="0,0,0,0" BorderBrush="{ThemeResource NavigationViewContentGridBorderBrush}" ItemsSource="{x:Bind Path=PairViewModel.Transactions, Mode=OneWay}" Background="Transparent" Margin="0" HorizontalAlignment="Stretch" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Visible">
                                    <ListBox.ItemContainerStyle>
                                        <Style TargetType="ListBoxItem" BasedOn="{StaticResource DefaultListBoxItemStyle}">
                                            <Setter Property="Padding" Value="3"/>
                                            <Setter Property="Height" Value="25"/>
                                            <Setter Property="IsEnabled" Value="False" />
                                        </Style>
                                    </ListBox.ItemContainerStyle>
                                    <ListBox.ItemTemplate>
                                        <DataTemplate x:DataType="model:Transaction">
                                            <Grid Margin="0">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="80" />
                                                    <ColumnDefinition Width="90" />
                                                    <ColumnDefinition Width="80" />
                                                </Grid.ColumnDefinitions>
                                                <TextBlock Grid.Column="0" x:Name="TransExecutedAt" Text="{x:Bind ExecutedAtFormatted, Mode=OneWay}" Margin="0" Padding="0 0 0 0" HorizontalAlignment="Right">
                                                    <TextBlock.Style>
                                                        <Style TargetType="TextBlock" BasedOn="{StaticResource CaptionTextBlockStyle}">
                                                        </Style>
                                                    </TextBlock.Style></TextBlock>
                                                <TextBlock Grid.Column="1" x:Name="TransPrice" Text="{x:Bind PriceFormatted, Mode=OneWay}" Margin="3 0 3 0" Padding="3 0 3 0"  HorizontalAlignment="Right">
                                                    <TextBlock.Style>
                                                        <Style TargetType="TextBlock" BasedOn="{StaticResource CaptionTextBlockStyle}">
                                                        </Style>
                                                    </TextBlock.Style></TextBlock>
                                                <TextBlock Grid.Column="2" x:Name="TransAmount" Text="{x:Bind Amount, Mode=OneWay}" Margin="0" Padding="0 0 0 0" HorizontalAlignment="Right">
                                                    <TextBlock.Style>
                                                        <Style TargetType="TextBlock" BasedOn="{StaticResource CaptionTextBlockStyle}">
                                                        </Style>
                                                    </TextBlock.Style></TextBlock>

                                            </Grid>
                                        </DataTemplate>
                                    </ListBox.ItemTemplate>
                                </ListBox>

                            </controls:Case>
                        </controls:SwitchPresenter>

                    </Grid>

                </Grid>
            </SplitView.Pane>

            <!-- Main Grid for Assets and Chart -->
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <!-- Pair label and LTP -->
                <StackPanel x:Name="SecondaryTitle" Grid.Row="0" Grid.Column="0" Margin="0" BorderThickness="0,0,0,1" BorderBrush="{ThemeResource NavigationViewContentGridBorderBrush}">
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Margin="12,12,0,0" Text="{x:Bind Path=PairViewModel.PairString, Mode=OneWay}" Style="{StaticResource BaseTextBlockStyle}"/>

                        <TextBlock Margin="12,12,0,0" Text="" Style="{StaticResource BaseTextBlockStyle}"/>
                        <TextBlock Margin="0,12,0,0" Text="{x:Bind Mode=OneWay, Path=PairViewModel.LtpString}" Style="{StaticResource BaseTextBlockStyle}"/>


                        <TextBlock Text="-" Margin="12,12,0,0" Style="{StaticResource BaseTextBlockStyle}" Opacity="{StaticResource CustumTextOpacity}"></TextBlock>

                        <TextBlock Margin="12,12,0,0" Text="{x:Bind Path=PairViewModel.TickTimeStampString, Mode=OneWay}" Style="{StaticResource BaseTextBlockStyle}" Opacity="{StaticResource CustumTextOpacity}"/>

                    </StackPanel>
                    <StackPanel Orientation="Horizontal" Margin="6,0,0,0">
                        <TextBlock Text="24H High: " Padding="6" Style="{StaticResource CaptionTextBlockStyle}" Opacity="{StaticResource CustumTextOpacity}"></TextBlock>
                        <TextBlock Text="{x:Bind Path=PairViewModel.High24String, Mode=OneWay}" Padding="0,6,0,6" Style="{StaticResource CaptionTextBlockStyle}" Opacity="{StaticResource CustumTextOpacity}"></TextBlock>

                        <TextBlock Text="," Padding="0,6,3,6" Style="{StaticResource CaptionTextBlockStyle}" Opacity="{StaticResource CustumTextOpacity}"></TextBlock>

                        <TextBlock Text="24H Low: " Padding="6" Style="{StaticResource CaptionTextBlockStyle}" Opacity="{StaticResource CustumTextOpacity}"></TextBlock>
                        <TextBlock Text="{x:Bind Path=PairViewModel.Low24String, Mode=OneWay}" Padding="0,6,0,6" Style="{StaticResource CaptionTextBlockStyle}" Opacity="{StaticResource CustumTextOpacity}"></TextBlock>

                    </StackPanel>
                </StackPanel>

                <!-- App Buttons for chart options and panel -->
                <StackPanel Grid.Row="0" Grid.Column="1" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" BorderThickness="0,0,0,1" BorderBrush="{ThemeResource NavigationViewContentGridBorderBrush}">

                    <StackPanel Orientation="Horizontal" VerticalAlignment="Bottom" HorizontalAlignment="Right">

                        <!-- Order button -->
                        <AppBarButton Label="Order" Icon="Add" ToolTipService.ToolTip="Order" Command="{x:Bind PairViewModel.ShowNewModalCommand}" IsCompact="False" VerticalAlignment="Bottom" Margin="0" Padding="0" Opacity="0.4"/>

                        <AppBarButton Label="{x:Bind PairViewModel.SelectedCandleTypeLabelString, Mode=OneWay}" ToolTipService.ToolTip="CandleType" IsCompact="False" VerticalAlignment="Bottom" Margin="0" Padding="0" Opacity="0.4">
                            <AppBarButton.Icon>
                                <PathIcon>
                                    <PathIcon.Data>
                                        M3,22V8H7V22H3M10,22V2H14V22H10M17,22V14H21V22H17Z</PathIcon.Data>
                                </PathIcon>
                            </AppBarButton.Icon>
                            <AppBarButton.Flyout>
                                <MenuFlyout>
                                    <MenuFlyoutItem x:Uid="1min" Command="{x:Bind PairViewModel.ChangeCandleTypeCommand}" CommandParameter="{x:Bind model:CandleTypes.OneMin}"/>
                                    <MenuFlyoutItem x:Uid="5min" Command="{x:Bind PairViewModel.ChangeCandleTypeCommand}" CommandParameter="{x:Bind model:CandleTypes.FiveMin}"/>
                                    <MenuFlyoutItem x:Uid="15min" Command="{x:Bind PairViewModel.ChangeCandleTypeCommand}" CommandParameter="{x:Bind model:CandleTypes.FifteenMin}"/>
                                    <MenuFlyoutItem x:Uid="30min" Command="{x:Bind PairViewModel.ChangeCandleTypeCommand}" CommandParameter="{x:Bind model:CandleTypes.ThirtyMin}"/>
                                    <MenuFlyoutSeparator/>

                                    <MenuFlyoutItem x:Uid="1hour" Command="{x:Bind PairViewModel.ChangeCandleTypeCommand}" CommandParameter="{x:Bind model:CandleTypes.OneHour}"/>
                                    <MenuFlyoutItem x:Uid="4hour" Command="{x:Bind PairViewModel.ChangeCandleTypeCommand}" CommandParameter="{x:Bind model:CandleTypes.FourHour}"/>
                                    <MenuFlyoutItem x:Uid="8hour" Command="{x:Bind PairViewModel.ChangeCandleTypeCommand}" CommandParameter="{x:Bind model:CandleTypes.EightHour}"/>
                                    <MenuFlyoutItem x:Uid="12hour" Command="{x:Bind PairViewModel.ChangeCandleTypeCommand}" CommandParameter="{x:Bind model:CandleTypes.TwelveHour}"/>
                                    <MenuFlyoutSeparator/>

                                    <MenuFlyoutItem x:Uid="1day" Command="{x:Bind PairViewModel.ChangeCandleTypeCommand}" CommandParameter="{x:Bind model:CandleTypes.OneDay}"/>
                                    <MenuFlyoutItem x:Uid="1week" Command="{x:Bind PairViewModel.ChangeCandleTypeCommand}" CommandParameter="{x:Bind model:CandleTypes.OneWeek}"/>
                                    <MenuFlyoutItem x:Uid="1month" Command="{x:Bind PairViewModel.ChangeCandleTypeCommand}" CommandParameter="{x:Bind model:CandleTypes.OneMonth}"/>
                                </MenuFlyout>
                            </AppBarButton.Flyout>
                        </AppBarButton>

                        <AppBarButton Label="{x:Bind PairViewModel.AlarmLabel, Mode=OneWay}" IsCompact="False" VerticalAlignment="Bottom" Margin="0" Padding="0" Opacity="0.4" Click="AppBarButton_Click">
                            <AppBarButton.Icon>
                                <PathIcon>
                                    <PathIcon.Data>
                                        M10,21H14A2,2 0 0,1 12,23A2,2 0 0,1 10,21M21,19V20H3V19L5,17V11C5,7.9 7.03,5.17 10,4.29C10,4.19 10,4.1 10,4A2,2 0 0,1 12,2A2,2 0 0,1 14,4C14,4.1 14,4.19 14,4.29C16.97,5.17 19,7.9 19,11V17L21,19M17,11A5,5 0 0,0 12,6A5,5 0 0,0 7,11V18H17V11M19.75,3.19L18.33,4.61C20.04,6.3 21,8.6 21,11H23C23,8.07 21.84,5.25 19.75,3.19M1,11H3C3,8.6 3.96,6.3 5.67,4.61L4.25,3.19C2.16,5.25 1,8.07 1,11Z
                                    </PathIcon.Data>
                                </PathIcon>
                            </AppBarButton.Icon>
                        </AppBarButton>

                        <AppBarButton x:Name="PanelOpenClose" Icon="OpenPane" Label="show" IsCompact="False" x:Uid="AppCommand_DisplayInfoPanel" Command="{x:Bind PairViewModel.TogglePaneVisibilityCommand}" VerticalAlignment="Bottom" Margin="0,0,4,0" Padding="0" Opacity="0.4">
                            <AppBarButton.KeyboardAccelerators>
                                <KeyboardAccelerator Modifiers="Control" Key="I" />
                            </AppBarButton.KeyboardAccelerators>
                        </AppBarButton>

                    </StackPanel>

                </StackPanel>

                <StackPanel Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" Orientation="Horizontal" Spacing="24" Margin="12,8,0,0" Opacity="{StaticResource CustumTextOpacity}">
                    <TextBlock>
						<Run Text="BID:"/>
						<Run Text="{x:Bind PairViewModel.Bid, Mode=OneWay}"/>
						<Run Text=", ASK:"/>
						<Run Text="{x:Bind PairViewModel.Ask, Mode=OneWay}"/>
                    </TextBlock>
                    <TextBlock>
						<Run Text="{x:Bind PairViewModel.AssetCurrentName, Mode=OneWay}"/>

						<Run Text="{x:Bind PairViewModel.AssetCurrentFreeAmountText, Mode=OneWay}"/>
						<Run Text="/"/>
						<Run Text="{x:Bind PairViewModel.AssetCurrentAmountText, Mode=OneWay}"/>

						<Run Text=" ("/>
						<Run Text="{x:Bind PairViewModel.AssetCurrentEstimateAmountText, Mode=OneWay}"/>
                        <Run Text=") "/>
                    </TextBlock>
                    <TextBlock>
						<Run Text="JPY"/>
						<Run Text="{x:Bind PairViewModel.AssetJPYFreeAmountText, Mode=OneWay}"/>
						<Run Text="/"/>
						<Run Text="{x:Bind PairViewModel.AssetJPYAmountText, Mode=OneWay}"/>
                    </TextBlock>
                </StackPanel>
                
                <!-- Assets, Chart-->
                <Grid Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2" BorderThickness="0,0,0,1" BorderBrush="{ThemeResource NavigationViewContentGridBorderBrush}">

                    <!-- Chart -->
                    <lvc:CartesianChart x:Name="LiveChart" Background="Transparent" Margin="0,0,0,0" 
                                        Series="{x:Bind PairViewModel.Series, Mode=OneWay}"
                                        Sections="{x:Bind PairViewModel.Sections, Mode=OneWay}"
                                        XAxes="{x:Bind PairViewModel.XAxes, Mode=OneWay}"
                                    YAxes="{x:Bind PairViewModel.YAxes, Mode=OneWay}"
                                    TooltipPosition="{x:Bind PairViewModel.IsChartTooltipVisibleTemp, Mode=OneWay}"
                                    ZoomMode="X"  >
                        
                        <!--
                        <lvc:CartesianChart.Sections>
                            <lvc:SectionsCollection>
                                <lvc:XamlRectangularSection ZIndex="10" Yi="{x:Bind PairViewModel.SectionYi, Mode=OneWay}" Yj="{x:Bind PairViewModel.SectionYj, Mode=OneWay}" Stroke="{lvc:SolidColorPaint Color='#F00', StrokeWidth=3, PathEffect={lvc:Dashed Array='6, 6'}}"/>
                            </lvc:SectionsCollection>
                        </lvc:CartesianChart.Sections>

-->

                        <!--
                        <lvc:CartesianChart.Sections>
                            <lvc:SectionsCollection>
                                <lvc:XamlRectangularSection 
                                    Yi="{x:Bind PairViewModel.SectionYi, Mode=OneWay}" Yj="{x:Bind PairViewModel.SectionYj, Mode=OneWay}"
                                                            Stroke="{lvc:SolidColorPaint Color='#F00', StrokeWidth=3, PathEffect={lvc:Dashed Array='6, 6'}}"/>

                            </lvc:SectionsCollection>
                        </lvc:CartesianChart.Sections>
                        -->
                        
                        <!--   

                                    Xi="{x:Bind PairViewModel.SectionXi, Mode=OneWay}" Xj="{x:Bind PairViewModel.SectionXj, Mode=OneWay}"
                                -->
                        <!--
                                <lvc:XamlRectangularSection Yi="{x:Bind PairViewModel.SectionYi, Mode=OneWay}" Yj="{x:Bind PairViewModel.SectionYj, Mode=OneWay}" Fill="{lvc:SolidColorPaint Color='#FFCDD2'}" 
                                                            Stroke="{lvc:SolidColorPaint Color='#F00', StrokeWidth=3, PathEffect={lvc:Dashed Array='6, 6'}}"/>
                                -->
                        <!--
                                <lvc:XamlRectangularSection Yi="8" Yj="8" Fill="{lvc:SolidColorPaint Color='#DDDDDD'}" 
                                                            Stroke="{lvc:SolidColorPaint Color='#EEE', StrokeWidth=3, PathEffect={lvc:Dashed Array='6, 6'}}"/>
                                -->

                    </lvc:CartesianChart>

                </Grid>
                
            </Grid>

        </SplitView>

        <!-- Row Grid Splitter -->
        <controls:GridSplitter Grid.Row="1"
                               Height="12"
                               VerticalAlignment="Top">
            <controls:GridSplitter.RenderTransform>
                <TranslateTransform Y="-7" />
            </controls:GridSplitter.RenderTransform>
        </controls:GridSplitter>

        <!-- Active Orders, TradeHistory, Errors -->
        <Grid Grid.Row="1" Grid.Column="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <controls:Segmented Grid.Row="0" x:Name="SegmentedControlBottom" Style="{StaticResource PivotSegmentedStyle}"
                            HorizontalAlignment="Stretch"
                            SelectedIndex="0" Margin="4">
                <controls:SegmentedItem x:Uid="TabHeader_ActiveOrders"
                                    Tag="Orders" />
                <controls:SegmentedItem x:Uid="TabHeader_History"
                                    Tag="History" />
                <controls:SegmentedItem x:Uid="TabHeader_Errors"
                                    Tag="Errors" />
            </controls:Segmented>
            <controls:SwitchPresenter Grid.Row="1" Value="{Binding SelectedItem.Tag, ElementName=SegmentedControlBottom}">
                <controls:Case Value="Orders">

                    <!-- Orders -->
                    <ListView x:Name="OrdersListview" ItemsSource="{x:Bind Path=PairViewModel.Orders, Mode=OneWay}" Background="{ThemeResource CardBackgroundFillColorDefaultBrush}" BorderBrush="{ThemeResource CardStrokeColorDefaultBrush}"
                                  ScrollViewer.VerticalScrollBarVisibility="Visible" animations:Implicit.HideAnimations="{StaticResource HideTransitions}"
                            animations:Implicit.ShowAnimations="{StaticResource ShowTransitions}" SelectionMode="Extended" IsMultiSelectCheckBoxEnabled="False">
                        <ListView.Header>
                            <Grid Padding="16,12" ColumnSpacing="8" Background="{ThemeResource NavigationViewContentBackground}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="60" />
                                    <ColumnDefinition Width="80" />
                                    <ColumnDefinition Width="60" />
                                    <ColumnDefinition Width="100" />
                                    <ColumnDefinition Width="90" />
                                    <ColumnDefinition Width="90" />
                                    <ColumnDefinition Width="80" />
                                    <ColumnDefinition Width="80" />
                                    <ColumnDefinition Width="120" />
                                    <ColumnDefinition Width="140" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <TextBlock Grid.Column="0" x:Uid="ListView_Orders_SideText"/>
                                <TextBlock Grid.Column="1" x:Uid="ListView_Orders_StartAmount"/>
                                <TextBlock Grid.Column="2" x:Uid="ListView_Orders_TypeText"/>
                                <TextBlock Grid.Column="3" x:Uid="ListView_Orders_Price"/>
                                <TextBlock Grid.Column="4" x:Uid="ListView_Orders_Shushi"/>
                                <TextBlock Grid.Column="5" x:Uid="ListView_Orders_AveragePrice"/>
                                <TextBlock Grid.Column="6" x:Uid="ListView_Orders_RemainingAmount"/>
                                <TextBlock Grid.Column="7" x:Uid="ListView_Orders_ActualPrice"/>
                                <TextBlock Grid.Column="8" x:Uid="ListView_Orders_StatusText"/>
                                <TextBlock Grid.Column="9" x:Uid="ListView_Orders_OrderID" />
                                <TextBlock Grid.Column="10" x:Uid="ListView_Orders_OrderedAt"/>
                            </Grid>
                        </ListView.Header>
                        <ListView.ContextFlyout>
                            <!--  x:Key="ListItemContextMenu" -->
                            <MenuFlyout>
                                <MenuFlyoutItem x:Uid="OrdersListview_CancelOrder" Command="{x:Bind PairViewModel.CancelOrderCommand}" CommandParameter="{x:Bind OrdersListview.SelectedItems}">
                                    <MenuFlyoutItem.Icon>
                                        <PathIcon Margin="0,0,0,0" Data="M14,3V5H17.59L7.76,14.83L9.17,16.24L19,6.41V10H21V3M19,19H5V5H12V3H5C3.89,3 3,3.9 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V12H19V19Z">
                                        </PathIcon>
                                    </MenuFlyoutItem.Icon>
                                </MenuFlyoutItem>

                            </MenuFlyout>
                        </ListView.ContextFlyout>
                        <ListView.ItemTemplate>
                            <DataTemplate x:DataType="localmodel:Order">
                                <Grid ColumnSpacing="8">
                                    <VisualStateManager.VisualStateGroups>
                                        <VisualStateGroup>
                                            <!-- Not working... -->
                                            <VisualState x:Name="Equal">
                                                <VisualState.StateTriggers>
                                                    <triggers:CompareStateTrigger Comparison="Equal" Value="{Binding Tag, ElementName=TextBlockTest, Mode=OneWay}" To="buy" />
                                                </VisualState.StateTriggers>
                                                <VisualState.Setters>
                                                    <Setter Target="TextBlockTest.Foreground" Value="Red" />
                                                </VisualState.Setters>
                                            </VisualState>
                                        </VisualStateGroup>
                                    </VisualStateManager.VisualStateGroups>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="60" />
                                        <ColumnDefinition Width="80" />
                                        <ColumnDefinition Width="60" />
                                        <ColumnDefinition Width="100" />
                                        <ColumnDefinition Width="90" />
                                        <ColumnDefinition Width="90" />
                                        <ColumnDefinition Width="80" />
                                        <ColumnDefinition Width="80" />
                                        <ColumnDefinition Width="120" />
                                        <ColumnDefinition Width="140" />
                                        <ColumnDefinition Width="*" />
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Grid.Column="0" Foreground="{ThemeResource TextFillColorSecondaryBrush}" x:Name="TextBlockTest" Tag="{x:Bind Side, Mode=OneWay}" Text="{x:Bind SideText, Mode=OneWay}" />
                                    <TextBlock Grid.Column="1" Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text="{x:Bind StartAmount, Mode=OneWay}" />
                                    <TextBlock Grid.Column="2" Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text="{x:Bind TypeText, Mode=OneWay}" />
                                    <TextBlock Grid.Column="3" Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text="{x:Bind Price, Mode=OneWay}" />
                                    <TextBlock Grid.Column="4" Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text="{x:Bind Shushi, Mode=OneWay}" />
                                    <TextBlock Grid.Column="5" Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text="{x:Bind AveragePrice, Mode=OneWay}" />
                                    <TextBlock Grid.Column="6" Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text="{x:Bind RemainingAmount, Mode=OneWay}" />
                                    <TextBlock Grid.Column="7" Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text="{x:Bind ActualPrice, Mode=OneWay}" />
                                    <TextBlock Grid.Column="8" Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text="{x:Bind StatusText, Mode=OneWay}" />
                                    <TextBlock Grid.Column="9" Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text="{x:Bind OrderID, Mode=OneWay}" />
                                    <TextBlock Grid.Column="10" Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text="{x:Bind OrderdAtText, Mode=OneWay}" />

                                </Grid>
                            </DataTemplate>
                        </ListView.ItemTemplate>
                        <ListView.ItemContainerStyle>
                            <Style BasedOn="{StaticResource DefaultListViewItemStyle}" TargetType="ListViewItem">
                                <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                                <Setter Property="Height" Value="30" />
                                <Setter Property="MinHeight" Value="30" />
                            </Style>
                        </ListView.ItemContainerStyle>
                    </ListView>

                </controls:Case>
                <controls:Case Value="History">

                    <!-- TradeHistory  -->
                    <ListView ItemsSource="{x:Bind Path=PairViewModel.TradeHistories, Mode=OneWay}" Background="{ThemeResource CardBackgroundFillColorDefaultBrush}" BorderBrush="{ThemeResource CardStrokeColorDefaultBrush}"
                                  ScrollViewer.VerticalScrollBarVisibility="Visible" animations:Implicit.HideAnimations="{StaticResource HideTransitions}"
                            animations:Implicit.ShowAnimations="{StaticResource ShowTransitions}">
                        <ListView.Header>
                            <Grid Padding="16,12" ColumnSpacing="8" Background="{ThemeResource NavigationViewContentBackground}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="80" />
                                    <ColumnDefinition Width="80" />
                                    <ColumnDefinition Width="80" />
                                    <ColumnDefinition Width="80" />
                                    <ColumnDefinition Width="80" />
                                    <ColumnDefinition Width="80" />
                                    <ColumnDefinition Width="80" />
                                    <ColumnDefinition Width="80" />
                                    <ColumnDefinition Width="100" />
                                    <ColumnDefinition Width="100" />
                                    <ColumnDefinition Width="140" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <TextBlock Grid.Column="0" x:Uid="ListView_TradeHistory_Pair" />
                                <TextBlock Grid.Column="1" x:Uid="ListView_TradeHistory_SideText"/>
                                <TextBlock Grid.Column="2" x:Uid="ListView_TradeHistory_Amount"/>
                                <TextBlock Grid.Column="3" x:Uid="ListView_TradeHistory_TypeText"/>
                                <TextBlock Grid.Column="4" x:Uid="ListView_TradeHistory_Price"/>
                                <TextBlock Grid.Column="5" x:Uid="ListView_TradeHistory_FeeAmountQuote"/>
                                <TextBlock Grid.Column="6" x:Uid="ListView_TradeHistory_FeeOccurredAmountQuote"/>
                                <TextBlock Grid.Column="7" x:Uid="ListView_TradeHistory_MakerTaker"/>
                                <TextBlock Grid.Column="8" x:Uid="ListView_TradeHistory_OrderID" />
                                <TextBlock Grid.Column="9" x:Uid="ListView_TradeHistory_TradeID" />
                                <TextBlock Grid.Column="10" x:Uid="ListView_TradeHistory_ExecutedAt"/>
                            </Grid>
                        </ListView.Header>
                        <ListView.ItemTemplate>
                            <DataTemplate x:DataType="localmodel:Trade">
                                <Grid ColumnSpacing="8">
                                    <VisualStateManager.VisualStateGroups>
                                        <VisualStateGroup>
                                            <!-- Not working... -->
                                            <VisualState x:Name="Equal">
                                                <VisualState.StateTriggers>
                                                    <triggers:CompareStateTrigger Comparison="Equal" Value="{Binding Tag, ElementName=TextBlockTest, Mode=OneWay}" To="buy" />
                                                </VisualState.StateTriggers>
                                                <VisualState.Setters>
                                                    <Setter Target="TextBlockTest.Foreground" Value="Red" />
                                                </VisualState.Setters>
                                            </VisualState>
                                        </VisualStateGroup>
                                    </VisualStateManager.VisualStateGroups>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="80" />
                                        <ColumnDefinition Width="80" />
                                        <ColumnDefinition Width="80" />
                                        <ColumnDefinition Width="80" />
                                        <ColumnDefinition Width="80" />
                                        <ColumnDefinition Width="80" />
                                        <ColumnDefinition Width="80" />
                                        <ColumnDefinition Width="80" />
                                        <ColumnDefinition Width="100" />
                                        <ColumnDefinition Width="100" />
                                        <ColumnDefinition Width="140" />
                                        <ColumnDefinition Width="*" />
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Grid.Column="0" Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text="{x:Bind Pair, Mode=OneWay}" />
                                    <TextBlock Grid.Column="1" Foreground="{ThemeResource TextFillColorSecondaryBrush}" x:Name="TextBlockTest" Tag="{x:Bind Side, Mode=OneWay}" Text="{x:Bind SideText, Mode=OneWay}" />
                                    <TextBlock Grid.Column="2" Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text="{x:Bind Amount, Mode=OneWay}" />
                                    <TextBlock Grid.Column="3" Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text="{x:Bind TypeText, Mode=OneWay}" />
                                    <TextBlock Grid.Column="4" Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text="{x:Bind Price, Mode=OneWay}" />
                                    <TextBlock Grid.Column="5" Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text="{x:Bind FeeAmountQuote, Mode=OneWay}" />
                                    <TextBlock Grid.Column="6" Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text="{x:Bind FeeOccurredAmountQuote, Mode=OneWay}" />
                                    <TextBlock Grid.Column="7" Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text="{x:Bind MakerTaker, Mode=OneWay}" />
                                    <TextBlock Grid.Column="8" Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text="{x:Bind OrderID, Mode=OneWay}" />
                                    <TextBlock Grid.Column="9" Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text="{x:Bind TradeID, Mode=OneWay}" />
                                    <TextBlock Grid.Column="10" Foreground="{ThemeResource TextFillColorSecondaryBrush}" Text="{x:Bind ExecutedAtText, Mode=OneWay}" />

                                </Grid>
                            </DataTemplate>
                        </ListView.ItemTemplate>
                        <ListView.ItemContainerStyle>
                            <Style BasedOn="{StaticResource DefaultListViewItemStyle}" TargetType="ListViewItem">
                                <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                                <Setter Property="Height" Value="30" />
                                <Setter Property="MinHeight" Value="30" />
                            </Style>
                        </ListView.ItemContainerStyle>
                    </ListView>

                </controls:Case>
            </controls:SwitchPresenter>

        </Grid>
        
    </Grid>
    
</UserControl>
